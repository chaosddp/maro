
# TODO: which config to inherit
# base: ""

#core:
#  units: "xxx"
#  facilities: "xxx"


facility_definitions:
  # facility definition
  WarehouseFacility: &warehouse_facility
    class: "WarehouseFacility"
    children:
      storage:
        class: "StorageUnit"
      distribution:
        class: "DistributionUnit"
      products:
        class: "ProductUnit"
        # if true then will call generate function of class type
        is_template: true
        # config will be passed to generator as parameters
        config:
          consumer:
            class: "ConsumerUnit"

  SupplierFacility: &supplier_facility
    class: "SupplierFacility"
    children:
      storage:
        class: "StorageUnit"
      distribution:
        class: "DistributionUnit"
      products:
        class: "ProductUnit"
        is_template: true
        config:
          consumer:
            class: "ConsumerUnit"
          manufacture:
            class: "ManufactureUnit"

  RetailerFacility: &retailer_facility
    class: "RetailerFacility"
    children:
      storage:
        class: "StorageUnit"
      products:
        class: "ProductUnit"
        is_template: true
        config:
          consumer:
            class: "ConsumerUnit"
          seller:
            class: "SellerUnit"

# common entity/unit definition as reference to simplify the file.
normal_vehicle: &normal_vehicle
  class: "VehicleUnit"
  config:
    patient: 100

# a normal distribution definition
normal_distribution: &normal_distribution
  class: "DistributionUnit"
  children:
    vehicles:
      - *normal_vehicle
      - *normal_vehicle
  config:
    unit_price: 1

small_storage: &small_storage
  # config of data model of this unit
  config:
    # other config or storage unit
    capacity: 10000
    unit_storage_cost: 1

midium_storage: &midium_storage
  config:
    capacity: 20000
    unit_storage_cost: 1

huge_storage: &huge_storage
  config:
    capacity: 30000
    unit_storage_cost: 1

# sku list in this world
# this list do not contains price, cost or other facility related attributes,
# but just base info, like name, id, bom
skus: &sku_definitions
  - id: 1
    name: "sku1"
    output_units_per_lot: 12
    # bill of material that used produce current sku, empty means do not need source material
    bom:
      # key is the source sku name, value is quantity needed to use per time to produce current sku
      sku3: 10

  - id: 2
    name: "sku2"
    output_units_per_lot: 1

  - id: 3
    name: "sku3"
    output_units_per_lot: 1


# world definitions
world:
  # here we use reference to make it each to edit.
  skus: *sku_definitions

  # facilities in this world
  facilities:
    - name: "Supplier_001" # name of the facility
      # NOTE: here we do not use yaml anchor override, as it not support partial override with more than 1 level
      # use the facility definition as base, then we can override configs partially.
      definition_ref: "SupplierFacility"

      # sku list of this facility
      skus:
        sku3: # sku name and attributes needed for this facility
          init_stock: 100
          product_unit_cost: 1
          type: "production" # production means this is the output production of this facility
          cost": 10
          price": 10

      # configuration of child units.
      children:
        # config of storage unit
        storage: *small_storage
        distribution: *normal_distribution

        # products use default config in core.yml

      # config of this facility
      config:
        delay_order_penalty: 10
        order_cost: 0
    - name: "Supplier_002"
      definition_ref: "SupplierFacility"

      skus:
        sku1:
          init_stock: 100
          product_unit_cost: 1
          type: "production"
          cost: 10
          price: 100
        sku3:
          init_stock: 100
          type: "material"
          cost: 10
          price: 100

      children:
        storage: *small_storage
        distribution: *normal_distribution

      config:
        delay_order_penalty: 10
        order_cost: 0
    - name: "Warehouse_001"
      definition_ref: "WarehouseFacility"

      skus:
        sku1:
          init_stock: 1000
          price: 100
        sku2:
          init_stock: 1000
          price: 100
        sku3:
          init_stock: 1000
          price: 100

      children:
        storage: *huge_storage
        distribution: *normal_distribution
      config:
        delay_order_penalty: 10
        order_cost: 0
    - name: "Retailer_001"
      definition_ref: "RetailerFacility"

      skus:
        sku1:
          price: 300
          cost: 10
          init_stock: 100
          sale_gamma: 100
          backlog_ratio: 0.1 # optional
        sku3:
          price: 200
          cost: 10
          init_stock: 100
          sale_gamma: 100
          backlog_ratio: 0.1
        sku2:
          price: 100
          cost: 10
          init_stock: 100
          sale_gamma: 100
          backlog_ratio: 0.1

      children:
        storage: *midium_storage

      config:
        order_cost: 0
  # topology used to specify the up/downstream for facilities
  # we split it from facility, so that we can support configuration inherit to override it
  # for a new topology
  # TODO: change the name?
  topology:
    # key is current facility, value if upstream facilities that will provide a certain sku
    Supplier_002:
      # this config means "Supplier1" will purchase "sku3" from facility "Supplier3",
      # or any other facility in the list
      sku3:
        - "Supplier_001"
    Warehouse_001:
      sku1:
        - "Supplier_002"
      sku3:
        - "Supplier_001"
    Retailer_001:
      sku1:
        - "Supplier_002"
      sku3:
        - "Supplier_001"

  # map grid definitions
  grid:
    size: [20, 20]

    # facility position in grid
    facilities:
      Supplier_001: [0, 0]
      Supplier_002: [3, 3]
      Warehouse_001: [6, 6]
      Retailer_001: [10, 18]

    # cells that un-traversable
    blocks:
      railroad:
        - [10, 10]
        - [10, 11]
        - [10, 12]
        - [11, 12]
